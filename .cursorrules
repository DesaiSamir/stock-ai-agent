# Stock AI Agent Code Organization Rules

## Directory Structure and Responsibilities

### src/
Root directory for all source code

### src/app/
- Next.js app router pages and layouts
- Main application entry points
- Route handlers and API endpoints
- Should not contain business logic
- Delegates to appropriate services and components

### src/components/
- React components organized by type
- /ui/: Basic UI components (Button, Input, Card)
- /charts/: Financial charting components
- /layout/: Layout components (Header, Footer, Sidebar)
- /features/: Feature-specific components
- Components should be functional components with TypeScript
- Use Material-UI and TailwindCSS for styling

### src/services/
- Business logic implementation
- API integration services
- Stock market data services
- AI/ML analysis services
- Stateful services should use singleton pattern
- Should be independent of UI implementation

### src/agents/
- AI/ML model implementations
- Trading strategy logic
- Market analysis algorithms
- Prediction models
- Should be well-documented and testable

### src/hooks/
- Custom React hooks
- State management hooks
- Data fetching hooks
- Reusable business logic hooks
- Should follow React hooks best practices

### src/utils/
- Shared utility functions
- Data transformation helpers
- Date formatting utilities
- Financial calculations
- Pure helper functions with no side effects

### src/types/
- TypeScript type definitions
- API response types
- Stock market data types
- Component prop types
- Shared interfaces and types

### src/lib/
- Third-party library configurations
- API client setup
- Database connections
- External service integrations

### src/theme/
- Material-UI theme configuration
- Custom theme overrides
- Color palettes
- Typography settings
- Component style defaults

### src/data/
- Mock data for development
- Data fixtures
- Test data sets
- Data transformation examples

## Code Organization Rules

1. Separation of Concerns:
   - UI components should be presentational only
   - Business logic belongs in services
   - Data fetching in hooks or services
   - Styling through Material-UI and TailwindCSS

2. Component Structure:
   - Use functional components with TypeScript
   - Implement proper prop types
   - Use composition over inheritance
   - Follow React best practices

3. State Management:
   - Use React hooks for local state
   - Consider context for global state
   - Implement proper state updates
   - Handle loading and error states

4. API Integration:
   - Use axios for HTTP requests
   - Implement proper error handling
   - Use TypeScript for API types
   - Document API endpoints

5. Styling:
   - Use Material-UI components
   - Extend with TailwindCSS when needed
   - Maintain consistent theming
   - Follow responsive design principles

6. Data Visualization:
   - Use appropriate charting libraries
   - Implement proper data formatting
   - Handle real-time updates
   - Ensure accessibility

7. Error Handling:
   - Implement proper error boundaries
   - Use TypeScript for type safety
   - Provide meaningful error messages
   - Log errors appropriately

8. Testing:
   - Write unit tests for utilities
   - Test business logic
   - Implement integration tests
   - Use Jest and React Testing Library

## File Naming Conventions

- Use PascalCase for components: StockChart.tsx, TradingPanel.tsx
- Use camelCase for utilities and services: stockService.ts, dateUtils.ts
- Use lowercase for hooks: useStockData.ts, useTradingStrategy.ts
- Test files end with .test.tsx or .spec.tsx

## Import Organization

- Group imports by type:
  1. External dependencies (react, next, etc.)
  2. Internal types and interfaces
  3. Components
  4. Hooks and services
  5. Utils and constants

## Documentation

- Include JSDoc comments for public functions
- Document complex algorithms
- Keep README up to date
- Include examples for reusable components
- Document API endpoints and data structures 